#!/usr/bin/env ruby

if $PROGRAM_NAME == __FILE__
  ENV['BUNDLE_GEMFILE'] = File.expand_path('../../Gemfile', __FILE__)
  require 'rubygems'
  require 'bundler/setup'
  $LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
end

require 'optparse'
require 'rescodegen/code_generator/swift_strings_generator'
require 'rescodegen/code_generator/objc_header_strings_generator'
require 'rescodegen/code_generator/objc_main_strings_generator'
require 'rescodegen/key_generator/strings_key_generator'
require 'rescodegen/code_formatter/code_formatter'

options = { output: ".", language: "swift", prefix: "" }

parser = OptionParser.new do |opts|
    opts.banner = "Usage: rescodegen [options] input_file"
    opts.separator "Generates some strings"
    opts.separator "Options:"
    opts.on("-l", "--language=swift|objc", "swift or objc") do |l|
        options[:language] = l
    end
    opts.on("-o", "--output=directory", "Directory to create file.") do |o|
        options[:output] = o
    end
    opts.on("-p", "--prefix=PREFIX", "Optional prefix for Objective-C types.") do |p|
        options[:prefix] = p
    end
end
parser.parse!

abort "Invalid -l argument. Expects swift or objc." if !options[:language].match("swift|objc")
input_file = ARGV.last
abort "Missing input_file.\n\n#{parser.help}" if input_file.nil?
output_file = options[:output] + "/" + options[:prefix] + "Strings"

def generate_swift_file(code_safe_keys, keys, output_file)
    File.write(output_file + ".swift", Rescodegen::SwiftStringsGenerator.new.generate(code_safe_keys, keys))
end

def generate_objc_files(code_safe_keys, keys, output_file, prefix)
    File.write(output_file + ".h", Rescodegen::ObjcHeaderStringsGenerator.new(prefix).generate(code_safe_keys, keys))
    File.write(output_file + ".m", Rescodegen::ObjcMainStringsGenerator.new(prefix).generate(code_safe_keys, keys))
end

generator = Rescodegen::StringsKeyGenerator.create_from_file(input_file)
keys = generator.keys
code_safe_keys = generator.code_safe_keys
formatter = Rescodegen::CodeFormatter.new
code_safe_keys = code_safe_keys.map { |k| formatter.format_string(k) }
generate_swift_file(code_safe_keys, keys, output_file) if options[:language] == "swift"
generate_objc_files(code_safe_keys, keys, output_file, options[:prefix]) if options[:language] == "objc"
