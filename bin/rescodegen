#!/usr/bin/env ruby

if $PROGRAM_NAME == __FILE__
  ENV['BUNDLE_GEMFILE'] = File.expand_path('../../Gemfile', __FILE__)
  require 'rubygems'
  require 'bundler/setup'
  $LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
end

require 'optparse'
require 'rescodegen/code_generator/swift_strings_generator'
require 'rescodegen/code_generator/objc_header_strings_generator'
require 'rescodegen/code_generator/objc_main_strings_generator'
require 'rescodegen/key_generator/key_generator'
require 'rescodegen/key_generator/code_safe_key_generator'
require 'rescodegen/code_formatter/code_formatter'
require 'rescodegen/key_reader/strings_key_reader'
require 'rescodegen/key_reader/stringsdict_key_reader'

options = { output: ".", language: "swift", prefix: "", input: [] }

parser = OptionParser.new do |opts|
    opts.banner = "Usage: rescodegen [options] input_file"
    opts.separator "Generates some strings"
    opts.separator "Options:"
    opts.on("-l", "--language=swift|objc", "swift or objc") do |l|
        options[:language] = l
    end
    opts.on("-o", "--output=directory", "Directory to create file.") do |o|
        options[:output] = o
    end
    opts.on("-p", "--prefix=PREFIX", "Optional prefix for Objective-C types.") do |p|
        options[:prefix] = p
    end
    opts.on("-i", "--input=file1,file2", Array, "Accepts .strings or .stringsdict files.") do |i|
        options[:input] += i
    end
end
parser.parse!

abort "Invalid -l argument. Expects swift or objc." if !options[:language].match("swift|objc")
abort "Missing -i argument. Must have at least 1 input file." if options[:input].size == 0
output_file = options[:output] + "/" + options[:prefix] + "Strings"

def generate_swift_file(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys, output_file)
    File.write(output_file + ".swift", Rescodegen::SwiftStringsGenerator.new.generate(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys))
end

def generate_objc_files(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys, output_file, prefix)
    File.write(output_file + ".h", Rescodegen::ObjcHeaderStringsGenerator.new(prefix).generate(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys))
    File.write(output_file + ".m", Rescodegen::ObjcMainStringsGenerator.new(prefix).generate(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys))
end

def abort_bad_input_file
    abort "Only currenly supports .strings and .stringsdict files."
end

def generator_for_file(file, key_reader)
    code_safe_key_generator = Rescodegen::CodeSafeKeyGenerator.new
    generator = Rescodegen::KeyGenerator.new(key_reader, code_safe_key_generator, file)
end

abort_bad_input_file if options[:input].select { |file| file.end_with?(".strings") || file.end_with?(".stringsdict") }.empty?

singular_keys = []
singular_code_safe_keys = []
options[:input].select { |file| file.end_with?(".strings") }
               .map { |file|
    generator = generator_for_file(file, Rescodegen::StringsKeyReader.new)
    singular_keys += generator.keys
    singular_code_safe_keys += generator.code_safe_keys
}

plural_keys = []
plural_code_safe_keys = []
options[:input].select { |file| file.end_with?(".stringsdict") }
               .map { |file|
    generator = generator_for_file(file, Rescodegen::StringsdictKeyReader.new)
    plural_keys += generator.keys
    plural_code_safe_keys += generator.code_safe_keys
}

abort "The input file(s) did not contain any keys." if singular_keys.size == 0 && plural_keys.size == 0

formatter = Rescodegen::CodeFormatter.new
singular_code_safe_keys = singular_code_safe_keys.map { |k| formatter.format_string(k) }
plural_code_safe_keys = plural_code_safe_keys.map { |k| formatter.format_string(k) }
generate_swift_file(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys, output_file) if options[:language] == "swift"
generate_objc_files(singular_code_safe_keys, singular_keys, plural_code_safe_keys, plural_keys, output_file, options[:prefix]) if options[:language] == "objc"
